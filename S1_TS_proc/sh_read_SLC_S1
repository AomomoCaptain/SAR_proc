#!/bin/bash

# read SLC from data folder and generate the parameter files
# updating parameter files with opod orbit file
# This script will generate relevant files at data directory ($procdir/data)
# Zelong Guo @GFZ
# zelong@gfz-potsdam.de
# First Version: 12/12/2020
# NOTE: this script should be run at the directory which contains grep_dates_s1a, grep_dates_s1b or both (these files are generated by sh_grep_S1_dates.sh), otherwise an error will be throwed.


version="11/01/2020"

if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "-h" ] || [ "$#" -lt "8"  ]; then
	cat<<END && exit 1 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
  Read SLC from data folder and generate the parameter files.

  Program:		`basename $0`
  Written by:		Zelong Guo (GFZ, Potsdam)
  First version:	12/12/2020
  Last edited:		$version

  usage:		$(basename $0) <opoddir> <miss_type> <pol> <m1_fswa> <m1_lswa> <m1_fbur> <m1_lbur> [m2_fswa]
                [m2_lswa] [m2_fbur] [m2_lbur] [disslc] [dissel]
                
  <opoddir>:    (input) opod folder
  <miss_type>:  (input) mission type, S1A, S1B or BOTH
  <pol>:        (input) ploarization, VV, VH or HH
  <m1_fswa>:    (input) mission-1 first swath
  <m1_lswa>:	(input) mission-1 last swath
  <m1_fbur>:    (input) mission-1 first burst
  <m1_lbur>:	(input) mission-1 last burst
  [m2_fswa]:	(input) mission-2 first swath, if miss_type = both, then the following should be specifed
  [m2_lswa]:	(input) mission-2 last swath
  [m2_fbur]:	(input) mission-2 first burst
  [m2_lbur]:	(input) mission-2 last burst
  [disslc]:		(input) display slc
  [dissel]:		(input) display sel.slc
  
  
    NOTE: this script should be run at the directory which contains grep_dates_s1a, grep_dates_s1b or both
    (these files are generated by sh_grep_S1_dates.sh

            CURRENT DIR: $PWD

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

END
fi


echo "sh_read_SLC.log" 

opoddir=$1
miss_type=$2
pol=$3
m1_fswa=$4
m1_lswa=$5
m1_fbur=$6
m1_lbur=$7
m2_fswa=$8
m2_lswa=${9}
m2_fbur=${10}
m2_lbur=${11}
disslc=${12}
dissel=${13}

#++++++++++++++++++++++++++++++++++ pre-checking the inputing parameters and the exisitence of grep_dates* files +++++++++++++++++++++++++++++++++++++#
miss_type=$(echo $miss_type | tr 'A-Z' 'a-z')
pol=$(echo $pol | tr 'A-Z' 'a-z')
disslc=$(echo $disslc | tr 'A-Z' 'a-z')
dissel=$(echo $dissel | tr 'A-Z' 'a-z')
case $miss_type in
	"s1a")
		[ ! -e "grep_dates_s1a" ] && echo "$0: grep_dates_s1a is not existent!! Please check it!!" && exit 1
		;;
	"s1b")
		[ ! -e "grep_dates_s1b" ] && echo "$0: grep_dates_s1b is not existent!! Please check it!!" && exit 1
		;;
	"both")
		[ ! -e "grep_dates_s1a" ] && [ ! -e "grep_dates_s1b" ] &&  echo "$0: grep_dates_s1a and grep_dates_s1b are not existent!! Please check it!!" && exit 1
		;;
	*)
		echo "$0: ERROR with the mission type, please check it!!" && exit 1
		;;
esac
[ "$pol" != "vv" ] && [ "$pol" != "hh" ] && [ "$pol" != "vh" ] && echo "$0: ERROR with the polarization, please check it!!" && exit 1

empty_flag=$(ls ./)
if [ "x$empty_flag" == "x" ]; then
	echo "$0: Sentinel-1 files do not exsit, please check it in data folder" && exit 1
fi

if [ -d $opoddir ]; then
	empty_flag=$(ls -A  $opoddir)
	if [ "x$empty_flag" == "x" ]; then
		echo "$0: OPOD files do not exsit, please check it in opod folder" 
	fi
else
	echo "$0: ERROR, the opod directory is not existed! Please check it!!"
fi

#+++++++++++++++++++++++++++++++++++++++++++++++++++++ reading the sensing data and writing it into an array ++++++++++++++++++++++++++++++++++++++++++++++++++#
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" 
echo "Reading the sensing data and writing it into an array..."

if [ "$miss_type" == "s1a" ]; then
	sensing_date_read=$(cat grep_dates_s1a | awk '{print $0}')
	index=0
	for sensing_date_read_index in $sensing_date_read
	do
		sensing_date_s1a[$index]=$sensing_date_read_index
		let index+=1
	done
	echo "Sensing_date_s1a:"
	echo "${sensing_date_s1a[*]}"
elif [ "$miss_type" == "s1b" ]; then
	sensing_date_read=$(cat grep_dates_s1b | awk '{print $0}')
	index=0
	for sensing_date_read_index in $sensing_date_read
	do
		sensing_date_s1b[$index]=$sensing_date_read_index
		let index+=1
	done
	echo "Sensing_date_s1b:"
	echo "${sensing_date_s1b[*]}"
else
	
	sensing_date_read=$(cat grep_dates_s1a | awk '{print $0}')
	index=0
	for sensing_date_read_index in $sensing_date_read
	do
		sensing_date_s1a[$index]=$sensing_date_read_index
		let index+=1
	done
	sensing_date_read=$(cat grep_dates_s1b | awk '{print $0}')
	index=0
	for sensing_date_read_index in $sensing_date_read
	do
		sensing_date_s1b[$index]=$sensing_date_read_index
		let index+=1
	done
	echo "Sensing_date_s1a:"
	echo "${sensing_date_s1a[*]}"
	echo "Sensing_date_s1b:"
	echo "${sensing_date_s1b[*]}"
fi	
echo "Reading the sensing data and writing to an array are finished."
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" 

echo ""
echo "Now working with par_S1_SLC..."
#+++++ checking the inputing parameters of $m1_fswa $m1_lswa $m1_fbur $m1_lbur $m2_fswa $m2_lswa $m2_fbur $m2_lbur +++++#
for i in $m1_fswa $m1_lswa $m1_fbur $m1_lbur
do
	flag=$(echo $i | sed 's/[0-9]//g')
	[ ! -z $flag ] && echo "$0: ERROR with the setting of M1 swath or burst! Please check it!!" && exit 1
done
if [ "$miss_type" == "both" ]; then
	for i in $m1_fswa $m1_lswa $m1_fbur $m1_lbur $m2_fswa $m2_lswa $m2_fbur $m2_lbur
	do
		flag=$(echo $i | sed 's/[0-9]//g')
		[ ! -z $flag ] && echo "$0: ERROR with the setting of swath or burst! Please check it!!" && exit 1
	done
fi

for i in $m1_fswa $m1_lswa
do
	if [ "$i" -lt 0 ] || [ "$i" -gt 3 ]; then
		echo "$0: ERROR with the setting of swathes, which should be 0-3!!!" && exit 1
	fi
done
if [ "$miss_type" == "both" ]; then
	for i in $m1_fswa $m1_lswa $m2_fswa $m2_lswa 
	do
		if [ "$i" -lt 0 ] || [ "$i" -gt 3 ]; then
			echo "$0: ERROR with the setting of swathes, which should be 0-3!!!" && exit 1
		fi
	done
fi

#+++++++++++ Now grep the relevant files to list +++++++++++#

[ -e "list" ] && rm list && touch list
if [ "$miss_type" == "s1a" ]; then
	for sensing_date in ${sensing_date_s1a[*]}
	do
 		ls -1 ./*$sensing_date*/measurement | grep "$pol" | grep "s1a-iw[$m1_fswa-$m1_lswa]-" | awk -F '.tiff' '{print $1}'  >> list
	done
elif [ "$miss_type" == "s1b" ]; then
	for sensing_date in ${sensing_date_s1b[*]}
	do
 		ls -1 ./*$sensing_date*/measurement | grep "$pol" | grep "s1b-iw[$m1_fswa-$m1_lswa]-" | awk -F '.tiff' '{print $1}' >> list
	done
else
	for sensing_date in ${sensing_date_s1a[*]}
	do
 		ls -1 ./*$sensing_date*/measurement | grep "$pol" | grep "s1a-iw[$m1_fswa-$m1_lswa]-" | awk -F '.tiff' '{print $1}' >> list
	done
	for sensing_date in ${sensing_date_s1b[*]}
	do
 		ls -1 ./*$sensing_date*/measurement | grep "$pol" | grep "s1b-iw[$m2_fswa-$m2_lswa]-" | awk -F '.tiff' '{print $1}'>> list
	done
	
fi 
list=$(cat list)
echo "The prefix of files needed by par_S1_SLC: "
echo "$list"
echo ""
rm list

#[ -e "sh_read_SLC.log" ] && rm sh_read_SLC.log
#echo "#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" > sh_read_SLC.log
#echo " This log file is outputed by sh_read_SLC.sh"
#echo " This log file is a detailed output file with par_S1_SLC and opod." >> sh_read_SLC.log #*****-----------------////////////////////*******************////////////////////
#echo ""
echo "The following is the detailed log file with par_S1_SLC..."
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" 
date "+%Y-%m-%d %H:%M:%S"
printf "\n\n"

[ -e "SLC_tab0" ] && rm SLC_tab0 && touch SLC_tab0
[ -e "SLC_tab1" ] && rm SLC_tab1 && touch SLC_tab1
[ -e "SLC_tab2" ] && rm SLC_tab2 && touch SLC_tab2

if [ "$miss_type" == "s1a" ] || [ "$miss_type" == "s1b" ]; then
	for d in $list
	do
		echo "reading image $d"
		n=$(echo "$d" | awk -F 'iw' '{print $2}' | awk -F '-' '{print $1}')
		k=$(echo "$d" | awk -F '-' '{print $5}' | awk -F 't' '{print $1}')
		echo "par_S1_SLC"
		par_S1_SLC ./*/measurement/$d.tiff ./*/annotation/$d.xml ./*/annotation/calibration/calibration-$d.xml ./*/annotation/calibration/noise-$d.xml $k.iw$n.slc.par $k.iw$n.slc $k.iw$n.slc.TOPS_par
		[ "$?" != "0" ] && echo "*********************************************************************************************" && echo "$d" && echo "$0: ERROR with par_S1_SLC at line 188" && echo "" && exit 1
		if [ "$disslc" == "yes" ] || [ "$disslc" == "y" ]; then
			w=$(grep 'range_samples' $k.iw$n.slc.par | awk '{print $2}')
			rasSLC $k.iw$n.slc $w - - 30 6 - - - - - $k.iw$n.slc.bmp
		fi
		echo "$k.iw$n.slc $k.iw$n.slc.par $k.iw$n.slc.TOPS_par" >> SLC_tab0
		echo "$k.iw$n.sel.slc $k.iw$n.sel.slc.par $k.iw$n.sel.slc.TOPS_par" >> SLC_tab1
		echo "$m1_fbur $m1_lbur" >> SLC_tab2
	done
else
	for d in $list
	do
		echo "reading image $d"
		miss_flag=$(echo "$d" | awk -F '-' '{print $1}' )
		n=$(echo "$d" | awk -F 'iw' '{print $2}' | awk -F '-' '{print $1}')
		k=$(echo "$d" | awk -F '-' '{print $5}' | awk -F 't' '{print $1}')
		echo "par_S1_SLC"
		par_S1_SLC ./*/measurement/$d.tiff ./*/annotation/$d.xml ./*/annotation/calibration/calibration-$d.xml ./*/annotation/calibration/noise-$d.xml $k.iw$n.slc.par $k.iw$n.slc $k.iw$n.slc.TOPS_par
		[ "$?" != "0" ] && echo "*********************************************************************************************" && echo "$d" && echo "$0: ERROR with par_S1_SLC at line 188" && echo "" && exit 1
		if [ "$disslc" == "yes" ] || [ "$disslc" == "y" ]; then
			w=$(grep 'range_samples' $k.iw$n.slc.par | awk '{print $2}')
			rasSLC $k.iw$n.slc $w  - 0 30 6 - - $k.iw$n.slc.bmp 0
		fi
		if [ "$miss_flag" == "s1a" ]; then
			echo "$k.iw$n.slc $k.iw$n.slc.par $k.iw$n.slc.TOPS_par" >> SLC_tab0
			echo "$k.iw$n.sel.slc $k.iw$n.sel.slc.par $k.iw$n.sel.slc.TOPS_par" >> SLC_tab1
			echo "$m1_fbur $m1_lbur" >> SLC_tab2
		elif [ "$miss_flag" == "s1b" ]; then
			echo "$k.iw$n.slc $k.iw$n.slc.par $k.iw$n.slc.TOPS_par" >> SLC_tab0
			echo "$k.iw$n.sel.slc $k.iw$n.sel.slc.par $k.iw$n.sel.slc.TOPS_par" >> SLC_tab1
			echo "$m2_fbur $m2_lbur" >> SLC_tab2
		fi
	done
fi

#++++++++++ SLC_copy_ScanSAR to select the bursts to output .sel.slc ++++++++++++#
SLC_copy_ScanSAR SLC_tab0 SLC_tab1 SLC_tab2


if [ "$dissel" == "yes" ] || [ "$dissel" == "y" ]; then
	for p in `ls *sel.slc`
	do
		w=$(grep 'range_samples' $p.par | awk '{print $2}')
		rasSLC $p $w - 0 20 4 - - $p.bmp 0
	done
fi

#+++++++++ now opod files will be employed to update slc.par +++++++++++#
if [ -d $opoddir ]; then
	empty_flag=$(ls -A  $opoddir)
	if [ "x$empty_flag" == "x" ]; then
		echo "$0: OPOD files do not exsit, please check it in opod folder" 
	fi
else
	for q in `ls *.sel.slc.par`
    do
	OPOD_vec $q $opoddir -
    done
fi
# updated By ZelongGUo @GFZ


echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
date "+%Y-%m-%d %H:%M:%S"
printf "\n\n\n"
