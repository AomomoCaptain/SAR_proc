#!/bin/bash

 #+++++++++++++++++++++++++++++++++++++++++++++++
 # Function: download Sentinel-1 orbit data
 # Input: 
	# sensing date as array, you can inout an array or read it form some script like sh_grep_S1_dates.sh
	# Mission Type Selected: S1A, S1B or both
	# (Orbit Type Selected:POEORB or RESORB)
 # Output:
	# orbit data you need
	# sh_get_S1_opod.log
 # Author: Zelong Guo, @GFZ, Potadam
 # Email: zelong.guo@gfz-potsdam.de
 # First Version: 15/11/2020,18:19
 #+++++ Program Function Explaination +++++#
 #----- Program Grammar Explaination  -----#
 #+++++++++++++++++++++++++++++++++++++++++++++++

#+++++++++++++++++++++++++++++++++++++ update log ++++++++++++++++++++++++++++++++++++++++++++
# 20.11.2020, 13:19 @ GFZ: debuged that the sensing day is the 1st and last day of every month
# 29.11.2020, 13:36 @ GFZ: the function of reading array form grep_dates_s1?
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#++++++++++++++++++++++++++++++ application +++++++++++++++++++++++++++++
# applied in: 
#   1. sh_prechecking.sh
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#/////////////////////////////////////////////////////////////////////
# NEXT UPDATE: the function of select the Orbit Type: POEORB or RESORB
#/////////////////////////////////////////////////////////////////////



version="01/01/2020"

if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "-h" ] || [ "$#" -lt "2"  ]; then
	cat<<END && exit 1 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
  Download Sentinel-1 orbit data (For now only poeorb is supported.)

  Program:		`basename $0`
  Written by:		Zelong Guo (GFZ, Potsdam)
  First version:	15/11/2020
  Last edited:		$version

  usage:		$(basename $0) <miss_type> <S1_dates>
  
  <miss_type>:  (input) mission type, S1A, S1B or BOTH
  <S1_dates>:   (input) grep_dates_s1[ab] file
  
  
  [$(basename $0).log]  (output) log file for checking  
  

            CURRENT DIR: $PWD

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

END
fi

#++++++++++++++++++++++++++ creat the sh_get_S1_opod.log +++++++++++++++++++++++++++#
[ -e "sh_get_S1_opod.log" ] && rm sh_get_S1_opod.log
echo "Download Log of sh_get_S1_opod.sh " > sh_get_S1_opod.log
printf "\n" >> sh_get_S1_opod.log
echo "++++++++++++++++++++++++++++++++++++++++++" >> sh_get_S1_opod.log
echo "Function: download Sentinel-1 orbit data" >> sh_get_S1_opod.log
echo "Author: Zelong Guo, @gfz, Potadam" >> sh_get_S1_opod.log
echo "Email: zelong.guo@gfz-potsdam.de" >> sh_get_S1_opod.log
echo "First version: 15/11/2020" >> sh_get_S1_opod.log
echo "++++++++++++++++++++++++++++++++++++++++++" >> sh_get_S1_opod.log
printf "\n\n" >> sh_get_S1_opod.log

#+++++++++++++++++++ count the download times +++++++++++++++++++++++++++#
do_flag=0
undo_flag=0
mission_type=$1
S1_dates=$2

#sensing_date=(20200131 20200201) # manually inputing or reading from fileï¼š
sensing_date_read=$(cat $2 | awk '{print $0}')
index=0;
for sensing_date_read_index in $sensing_date_read
do
	sensing_date[$index]=$sensing_date_read_index
	let index+=1
done



#++++++++++++++++++ extract the POEORB orbit file lists from asf +++++++++++++++++++++#
echo "Now connecting to the website of ASF..."
ASF="https://s1qc.asf.alaska.edu/aux_poeorb/"
file_list=$(curl -s -u zelong:GuoZeLong0928 $ASF) 
[ "$?" -ne "0" ] && echo "Error! Please check!" && exit
echo "Connected!"
#echo "$file_list"

#+++++++++++++++++++++++ Confirm: S1A, S1B or BOTH ++++++++++++++++++++++++++++++#
if [ "$mission_type" == "S1A" ] || [ "$mission_type" == "s1a" ]; then
	file_list_mission=$(echo "$file_list" | grep "href=\"S1A" | awk '{print $2}' | sed 's/^.*="//g' | sed 's/">.*$//g')
elif [ "$mission_type" == "S1B" ] || [ "$mission_type" == "s1b" ]; then
	file_list_mission=$(echo "$file_list" | grep "href=\"S1B" | awk '{print $2}' | sed 's/^.*="//g' | sed 's/">.*$//g')
elif [ "$mission_type" == "BOTH" ] || [ "$mission_type" == "both" ]; then
	file_list_mission=$(echo "$file_list" | grep "href=\"S1" | awk '{print $2}' | sed 's/^.*="//g' | sed 's/">.*$//g')
else
	printf "\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	printf "$0: \tThe argument you inputed is INCORRECT!\nPlease input the mission type: S1A, S1B or BOTH (s1a, s1b or both)!\n\n\n"
	exit
fi

#echo "$file_list_mission"
[ "x$file_list_mission" = "x" ] && echo "$0: Not found files!"



for ((i=0;i<${#sensing_date[*]};i++))
do
	let validity_start=$(date -d "${sensing_date[$i]} -1 days" "+%Y%m%d")
	let validity_stop=$(date -d "${sensing_date[$i]} +1 days" "+%Y%m%d")
#	let validity_start=${sensing_date[$i]}-1
#	let validity_stop=${sensing_date[$i]}+1


#++++++++++++++++++++++++ Matching the files that you need to download ++++++++++++++++++++++++++++++#

file_list_need=$(echo "$file_list_mission" | grep ${validity_start}'.*'${validity_stop} )
#echo "$file_list_need" 

#:<<!
	if [ "$mission_type" == "S1A" ] || [ "$mission_type" == "s1a" ] || [ "$mission_type" == "S1B" ] || [ "$mission_type" == "s1b" ]; then
	
		if [ ! -n "$file_list_need" ]; then 
			printf "The %s orbit is not being downloaded, the sensing date is %i\n" $mission_type ${sensing_date[$i]} >> sh_get_S1_opod.log
			let undo_flag+=1
		else
			let do_flag+=1
			wget --no-check-certificate --user=zelong --password=GuoZeLong0928 -c $ASF$file_list_need
			printf "\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
			printf '\tDownload sucessfully %i files\n' $do_flag
			printf '\tPlease see the sh_get_S1_opod.log.'
			printf '\n\n'
			#----------------------------------------------------
			#---------------------------------------------------#
		fi

	else
		line_num=$(echo "$file_list_need" | wc -l)
		word_num=$(echo "$file_list_need" | wc -w)
		#------------------------------------------#	
		#------------------------------------------#
		echo "**************************************"
		[ "$line_num" == "1"  ] && [ "$word_num" == "0"  ] && let line_num=0 
		#-----------------------------------------------------------------------------------------#	
		#-----------------------------------------------------------------------------------------#

		if [ "$line_num" == "0"  ]; then
			printf "The %s of s1a and s1b orbits is not being downloaded, the sensing date is %i\n" $mission_type ${sensing_date[$i]} >> sh_get_S1_opod.log
			let undo_flag+=2
		elif [ "$line_num" == "1" ]; then
			printf "The one of (s1b)  %s of orbits is not being downloaded, the sensing date is %i\n" $mission_type ${sensing_date[$i]} >> sh_get_S1_opod.log
			let do_flag+=1
			let undo_flag+=1
			wget --no-check-certificate --user=zelong --password=GuoZeLong0928 -c $ASF$file_list_need
			printf "\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
			printf '\tDownload Situation:\n\t%i files successed, %i fialed\n' $do_flag $undo_flag
			printf '\tPlease see the sh_get_S1_opod.log.'
			printf '\n\n'
		elif [ "$line_num" == "2" ]; then
			let do_flag+=2
			echo "$file_list_need" | awk -v ASF=$ASF '{tep=ASF$0; print tep}'  > file_list_need.log
			#--------------------------------------------------------------------------#
			#--------------------------------------------------------------------------#
			wget --no-check-certificate --user=zelong --password=GuoZeLong0928 -c -i file_list_need.log
			printf "\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
			printf '\tDownload Situation:\n\t%i files successed, %i fialed\n' $do_flag $undo_flag
			printf '\tPlease see the sh_get_S1_opod.log.'
			printf '\n\n'
			rm file_list_need.log
		else
			printf "\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
			printf "$0: ERROR with the file list needed!\n"
			echo "$file_list_need"
			echo "$line_num"
		fi	
		
	fi

#!
done


#++++++++++++++++++++++++++++++++++++++++++ Write to the log +++++++++++++++++++++++++++++++++++++++++++++++++++#

if [ "$mission_type" == "S1A" ] || [ "$mission_type" == "s1a" ] || [ "$mission_type" == "S1B" ] || [ "$mission_type" == "s1b" ]; then
	let total_flag=do_flag+undo_flag
	printf "\n\n" >> sh_get_S1_opod.log
	printf "Total %i files\n" $total_flag >> sh_get_S1_opod.log
	printf "Successfully downloaded %i files, failed %i files \n" $do_flag $undo_flag >> sh_get_S1_opod.log
	date "+%Y-%m-%d %H:%M:%S" >> sh_get_S1_opod.log
else
	let total_flag=do_flag+undo_flag
	printf "\n\n" >> sh_get_S1_opod.log
	printf "Total %i files\n" $total_flag >> sh_get_S1_opod.log
	printf "Successfully downloaded %i files, failed %i files \n" $do_flag $undo_flag >> sh_get_S1_opod.log
	date "+%Y-%m-%d %H:%M:%S" >> sh_get_S1_opod.log
fi


